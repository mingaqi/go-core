package _1basic

import (
	"fmt"
	"testing"
)

// 位运算
// 二进制 to 十进制
// 1100 --> 从低位开始 2的0次方,1次方 0<<0 + 0<<1 + 1<<2 + 1<<3
// 十进制 to 二进制
// 12 --> 12除2商6于0  低位是0  依次用商除2取余  1100
func TestOperator(t *testing.T) {

	// & 与 两位相同为1
	fmt.Println(0&0, 0&1, 1&1)

	// | 或 两位有1为1
	fmt.Println(0|0, 0|1, 1|1)

	// ^  异或 相同取0 不同取1
	//12=1100  5 = 0111  1100^0101 = 1001
	fmt.Println(12 ^ 5)

	// <<  左移位 1<<3 1*2的3次方  高位丢弃，低位补0 符号位不丢
	fmt.Println(1 << 3)

	// >> 右移位  高位补0或者1 除以2的n次方
	fmt.Println(60 >> 2)

}
